### log in to obtain token
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "username": "Test2",
  "password": "12345"
}

###

### Get all products
GET http://localhost:5000/api/products

###

### Add a review to a product (user must be logged in)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": 5,
  "comment": "Review to delete2!"
}

###

### Add a second review for the same product by the same user (should fail if only one review per user allowed)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": 4,
  "comment": "Second review - should fail if not allowed"
}

###

### Add review without token (should fail)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json

{
  "rating": 4,
  "comment": "Should fail, no token"
}

###

### Add review with missing rating (should fail)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "comment": "No rating"
}

###

### Add review with missing comment (should succeed if comment is optional, or fail if required)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": 3
}

###

### Add review with invalid rating (should fail)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": 10,
  "comment": "Invalid rating"
}

###

### Add review with non-numeric rating (should fail)
POST http://localhost:5000/api/products/<PRODUCT_ID>/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": "bad",
  "comment": "Non-numeric rating"
}

###

### Add review with invalid productId (should fail)
POST http://localhost:5000/api/products/invalidid/reviews
Content-Type: application/json
Authorization: Bearer <USER_TOKEN>

{
  "rating": 5,
  "comment": "Invalid productId"
}

###

### Get all reviews for a product
GET http://localhost:5000/api/products/<PRODUCT_ID>/reviews

###

### Get reviews for non-existent product (should return empty or 404)
GET http://localhost:5000/api/products/000000000000000000000000/reviews

###

### Delete a review (owner or admin)
DELETE http://localhost:5000/api/products/reviews/<REVIEW_ID>
Authorization: Bearer <OWNER_OR_ADMIN_TOKEN>

###

### Delete review without token (should fail)
DELETE http://localhost:5000/api/products/reviews/<REVIEW_ID>

###

### Delete review as not owner and not admin (should fail)
DELETE http://localhost:5000/api/products/reviews/<REVIEW_ID>
Authorization: Bearer <NOT_OWNER_TOKEN>

###

### Delete review with invalid reviewId (should fail)
DELETE http://localhost:5000/api/products/reviews/invalidid
Authorization: Bearer <USER_TOKEN>
#include "board.hpp"
#include <iostream>
#include <iomanip>

Board::Board() {
    reset();
}

void Board::reset() {
    for (auto& row : board) {
        row.fill(0);
    }
}

void Board::print() const {
    std::cout << "  1 2 3 4 5\n";
    for (int i = 0; i < SIZE; i++) {
        std::cout << i + 1;
        for (int j = 0; j < SIZE; j++) {
            switch (board[i][j]) {
                case 0: std::cout << " -"; break;
                case 1: std::cout << " X"; break;
                case 2: std::cout << " O"; break;
            }
        }
        std::cout << "\n";
    }
    std::cout << "\n";
}

bool Board::setMove(int move, int player) {
    int i = (move / 10) - 1;
    int j = (move % 10) - 1;
    
    if (i < 0 || i >= SIZE || j < 0 || j >= SIZE) return false;
    if (board[i][j] != 0) return false;
    
    board[i][j] = player;
    return true;
}

const std::vector<Board::Line> Board::winningLines = {
    // Horizontal lines
    {{0,0}, {0,1}, {0,2}, {0,3}}, {{1,0}, {1,1}, {1,2}, {1,3}}, 
    {{2,0}, {2,1}, {2,2}, {2,3}}, {{3,0}, {3,1}, {3,2}, {3,3}},
    {{4,0}, {4,1}, {4,2}, {4,3}}, {{0,1}, {0,2}, {0,3}, {0,4}},
    {{1,1}, {1,2}, {1,3}, {1,4}}, {{2,1}, {2,2}, {2,3}, {2,4}},
    {{3,1}, {3,2}, {3,3}, {3,4}}, {{4,1}, {4,2}, {4,3}, {4,4}},
    
    // Vertical lines
    {{0,0}, {1,0}, {2,0}, {3,0}}, {{0,1}, {1,1}, {2,1}, {3,1}},
    {{0,2}, {1,2}, {2,2}, {3,2}}, {{0,3}, {1,3}, {2,3}, {3,3}},
    {{0,4}, {1,4}, {2,4}, {3,4}}, {{1,0}, {2,0}, {3,0}, {4,0}},
    {{1,1}, {2,1}, {3,1}, {4,1}}, {{1,2}, {2,2}, {3,2}, {4,2}},
    {{1,3}, {2,3}, {3,3}, {4,3}}, {{1,4}, {2,4}, {3,4}, {4,4}},
    
    // Diagonal lines
    {{0,1}, {1,2}, {2,3}, {3,4}}, {{0,0}, {1,1}, {2,2}, {3,3}},
    {{1,1}, {2,2}, {3,3}, {4,4}}, {{1,0}, {2,1}, {3,2}, {4,3}},
    {{0,3}, {1,2}, {2,1}, {3,0}}, {{0,4}, {1,3}, {2,2}, {3,1}},
    {{1,3}, {2,2}, {3,1}, {4,0}}, {{1,4}, {2,3}, {3,2}, {4,1}}
};

const std::vector<Board::Line> Board::losingLines = {
    // Horizontal lines
    {{0,0}, {0,1}, {0,2}}, {{0,1}, {0,2}, {0,3}}, {{0,2}, {0,3}, {0,4}},
    {{1,0}, {1,1}, {1,2}}, {{1,1}, {1,2}, {1,3}}, {{1,2}, {1,3}, {1,4}},
    {{2,0}, {2,1}, {2,2}}, {{2,1}, {2,2}, {2,3}}, {{2,2}, {2,3}, {2,4}},
    {{3,0}, {3,1}, {3,2}}, {{3,1}, {3,2}, {3,3}}, {{3,2}, {3,3}, {3,4}},
    {{4,0}, {4,1}, {4,2}}, {{4,1}, {4,2}, {4,3}}, {{4,2}, {4,3}, {4,4}},
    
    // Vertical lines
    {{0,0}, {1,0}, {2,0}}, {{1,0}, {2,0}, {3,0}}, {{2,0}, {3,0}, {4,0}},
    {{0,1}, {1,1}, {2,1}}, {{1,1}, {2,1}, {3,1}}, {{2,1}, {3,1}, {4,1}},
    {{0,2}, {1,2}, {2,2}}, {{1,2}, {2,2}, {3,2}}, {{2,2}, {3,2}, {4,2}},
    {{0,3}, {1,3}, {2,3}}, {{1,3}, {2,3}, {3,3}}, {{2,3}, {3,3}, {4,3}},
    {{0,4}, {1,4}, {2,4}}, {{1,4}, {2,4}, {3,4}}, {{2,4}, {3,4}, {4,4}},
    
    // Diagonal lines
    {{0,2}, {1,3}, {2,4}}, {{0,1}, {1,2}, {2,3}}, {{1,2}, {2,3}, {3,4}},
    {{0,0}, {1,1}, {2,2}}, {{1,1}, {2,2}, {3,3}}, {{2,2}, {3,3}, {4,4}},
    {{1,0}, {2,1}, {3,2}}, {{2,1}, {3,2}, {4,3}}, {{2,0}, {3,1}, {4,2}},
    {{0,2}, {1,1}, {2,0}}, {{0,3}, {1,2}, {2,1}}, {{1,2}, {2,1}, {3,0}},
    {{0,4}, {1,3}, {2,2}}, {{1,3}, {2,2}, {3,1}}, {{2,2}, {3,1}, {4,0}},
    {{1,4}, {2,3}, {3,2}}, {{2,3}, {3,2}, {4,1}}, {{2,4}, {3,3}, {4,2}}
};

bool Board::winCheck(int player) const {
    return checkLines(player, winningLines);
}

bool Board::loseCheck(int player) const {
    return checkLines(player, losingLines);
}

bool Board::checkLines(int player, const std::vector<Line>& lines) const {
    for (const auto& line : lines) {
        bool match = true;
        for (const auto& [i, j] : line) {
            if (board[i][j] != player) {
                match = false;
                break;
            }
        }
        if (match) return true;
    }
    return false;
}